package com.ts.can;

import java.util.List;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.Application;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import com.ts.bt.BtExe;
import com.ts.main.common.CrashHandler;
import com.ts.main.common.MainSet;
import com.ts.main.common.MainUI;
import com.ts.main.common.WinShow;

public class MyApplication extends Application
{


	public static Context mContext;

	@Override
	public void onCreate()
	{
		// TODO Auto-generated method stub
		printContext(this);
		String strProcess = getProcessName(this, android.os.Process.myPid());	
		if (null == strProcess)
		{
			Log.e("MyApplication", "getProcessName = null");
		}
		else
		{
			Log.e("MyApplication", "getProcessName = " + strProcess);
			if (!strProcess.contains(":remote"))
			{
			
				Intent intent = new Intent("android.intent.action.MAIN_SERVICE");				
				intent.setPackage("com.ts.MainUI");
				startService(intent);
			  
				startNaviBarServiceIfExist();
				
				mContext = this;
			    CrashHandler.getInstance().init(this);
				MainSet.mContext = this;
				WinShow.mContext = this;
				BtExe.setContext(this);
				MainUI.SetCanCallBack(CanFunc.getInstance());
				CanIF.SetCanTypeCb(CanFunc.getInstance());
			}
		}	
		
		super.onCreate();
	}
	
	private void startNaviBarServiceIfExist() {
		try {
			Class<?> cls = Class.forName("com.ts.main.navigationbar.NaviBarService");
			Intent intent = new Intent("com.ts.main.navigationbar.NaviBarService");				
			intent.setPackage("com.ts.MainUI");
			startService(intent);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	public static String getProcessName(Context cxt, int pid)
	{
		ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningAppProcessInfo> runningApps = am.getRunningAppProcesses();
		if (runningApps == null)
		{
			return null;
		}
		
		for (RunningAppProcessInfo procInfo : runningApps)
		{
			if (procInfo.pid == pid)
			{
				return procInfo.processName;
			}
		}
		return null;
	}
	
	static Context getContext()
	{
		return mContext;
	}

	private void printContext(Context context)
	{
		Log.e("MyApplication", "printContext = " + context.toString());
	}
}
